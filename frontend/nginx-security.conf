# Advanced Nginx Security Configuration for Production
# Include this file in your main nginx.conf at http level

# Rate Limiting Zones
# Define different zones for different endpoint types
limit_req_zone $binary_remote_addr zone=general_limit:10m rate=30r/s;
limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;
limit_req_zone $binary_remote_addr zone=auth_limit:10m rate=5r/m;
limit_req_zone $binary_remote_addr zone=upload_limit:10m rate=2r/s;
limit_req_zone $binary_remote_addr zone=search_limit:10m rate=20r/s;

# Connection limiting
limit_conn_zone $binary_remote_addr zone=addr:10m;
limit_conn_zone $server_name zone=server:10m;

# Request rate by server
limit_req_zone $server_name zone=server_limit:10m rate=1000r/s;

# Define cache zones for different content types
proxy_cache_path /var/cache/nginx/api levels=1:2 keys_zone=api_cache:10m max_size=100m inactive=60m use_temp_path=off;
proxy_cache_path /var/cache/nginx/static levels=1:2 keys_zone=static_cache:10m max_size=500m inactive=7d use_temp_path=off;

# SSL Session Cache (if using HTTPS)
ssl_session_cache shared:SSL:10m;
ssl_session_timeout 10m;

# Map to detect common security threats
map $http_user_agent $bad_bot {
    default 0;
    ~*(?:acunetix|sqlmap|nikto|scan|spider|crawler|bot) 1;
    ~*(?:havij|libwww-perl|wget|python|nikto|curl) 1;
    ~*(?:;|<|>|'|"|\)|\(|%|\\) 1;
}

# Map for blocking based on request method
map $request_method $not_allowed_method {
    default 0;
    ~*(?:TRACE|TRACK|CONNECT) 1;
}

# Map for detecting SQL injection attempts
map $request_uri $sql_injection {
    default 0;
    ~*(?:union.*select|select.*from|insert.*into|delete.*from|drop.*table) 1;
    ~*(?:script.*>|javascript:|onerror=|onload=) 1;
    ~*(?:\.\.\/|\.\.\\|%2e%2e%2f) 1;
}

# Map for real IP detection behind proxies
map $http_x_forwarded_for $real_ip {
    default $remote_addr;
    "~^(?<firstaddr>[^,]+),.*$" $firstaddr;
}

# Security headers map (to avoid duplication)
map $sent_http_content_type $security_headers {
    default "default-src 'self'; script-src 'self'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self'; frame-ancestors 'none'; base-uri 'self'; form-action 'self';";
}

# GeoIP blocking (requires GeoIP module)
# geoip_country /usr/share/GeoIP/GeoIP.dat;
# map $geoip_country_code $blocked_country {
#     default 0;
#     CN 1;
#     RU 1;
#     KP 1;
# }

# Request ID for tracking
map $http_x_request_id $request_id {
    default $http_x_request_id;
    "" $request_id_sequence;
}

# Define request ID sequence
map $msec $request_id_sequence {
    ~(.*) $1-$connection-$connection_requests;
}

# Security Configuration Snippets
# Include these in your server blocks as needed

# Basic Security Headers (include in location blocks)
# add_header X-Frame-Options "DENY" always;
# add_header X-Content-Type-Options "nosniff" always;
# add_header X-XSS-Protection "1; mode=block" always;
# add_header Referrer-Policy "strict-origin-when-cross-origin" always;
# add_header Content-Security-Policy $security_headers always;
# add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
# add_header X-Request-ID $request_id always;

# ModSecurity Integration (Web Application Firewall)
# modsecurity on;
# modsecurity_rules_file /etc/nginx/modsecurity/main.conf;

# NAXSI Integration (Another WAF option)
# include /etc/nginx/naxsi_core.rules;

# DDoS Protection Settings
# client_body_timeout 10s;
# client_header_timeout 10s;
# send_timeout 10s;
# reset_timedout_connection on;

# Buffer overflow protection
# client_body_buffer_size 1K;
# client_header_buffer_size 1k;
# client_max_body_size 1m;
# large_client_header_buffers 2 1k;

# Logging Configuration for Security Monitoring
log_format security '$remote_addr - $remote_user [$time_local] '
                    '"$request" $status $body_bytes_sent '
                    '"$http_referer" "$http_user_agent" '
                    '$request_time $upstream_response_time '
                    '$pipe $connection_requests '
                    'rate_limit_status=$limit_req_status '
                    'request_id=$request_id';

# JSON logging for better parsing
log_format json escape=json '{'
    '"timestamp":"$time_iso8601",'
    '"remote_addr":"$remote_addr",'
    '"request_method":"$request_method",'
    '"request_uri":"$request_uri",'
    '"status":$status,'
    '"body_bytes_sent":$body_bytes_sent,'
    '"request_time":$request_time,'
    '"upstream_response_time":"$upstream_response_time",'
    '"http_referrer":"$http_referer",'
    '"http_user_agent":"$http_user_agent",'
    '"http_x_forwarded_for":"$http_x_forwarded_for",'
    '"request_id":"$request_id",'
    '"limit_req_status":"$limit_req_status"'
'}';

# Failed request logging
log_format failed '$remote_addr - $remote_user [$time_local] '
                  '"$request" $status $body_bytes_sent '
                  '"$http_referer" "$http_user_agent" '
                  'FAILED - reason: $request_completion';