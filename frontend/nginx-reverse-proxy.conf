# Nginx Reverse Proxy Configuration for React SPA + Flask Backend
# Environment-independent configuration for OSS distribution

# Upstream configuration - define backend service
upstream backend_service {
    # Use environment variable or default to localhost:5000
    # In production, replace with actual backend service address
    server ${BACKEND_HOST:-localhost}:${BACKEND_PORT:-5000} max_fails=3 fail_timeout=30s;

    # For multiple backend instances (load balancing)
    # server backend1:5000 weight=3;
    # server backend2:5000 weight=2;
    # keepalive 32; # Connection pooling for better performance
}

# Rate limiting zones (defined at http level in main nginx.conf)
# limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;
# limit_req_zone $binary_remote_addr zone=auth_limit:10m rate=5r/m;
# limit_conn_zone $binary_remote_addr zone=addr:10m;

# Map for WebSocket upgrade
map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
}

server {
    listen 80;
    server_name localhost;

    # Basic security
    server_tokens off;

    # Client body size limits
    client_max_body_size 10M;  # Adjust based on your file upload requirements
    client_body_buffer_size 128k;
    client_header_buffer_size 1k;
    large_client_header_buffers 4 16k;

    # Timeouts for request handling
    client_body_timeout 30s;
    client_header_timeout 30s;
    send_timeout 30s;

    # Connection limits
    keepalive_timeout 65;
    keepalive_requests 100;

    # Root for SPA static files
    root /usr/share/nginx/html;
    index index.html;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css text/xml text/javascript
               application/json application/javascript application/xml+rss
               application/atom+xml image/svg+xml;

    # API Proxy Configuration
    location /api/ {
        # Rate limiting (uncomment if limit zones are defined)
        # limit_req zone=api_limit burst=20 nodelay;
        # limit_conn addr 10;

        # Proxy to backend service
        proxy_pass http://backend_service;

        # Essential proxy headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $server_name;
        proxy_set_header X-Forwarded-Port $server_port;

        # Remove the /api prefix if backend doesn't expect it
        # rewrite ^/api/(.*) /$1 break;

        # WebSocket support headers
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;

        # Timeout configurations for long-running requests
        proxy_connect_timeout 60s;
        proxy_send_timeout 300s;
        proxy_read_timeout 300s;

        # Buffering settings
        proxy_buffering on;
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;
        proxy_busy_buffers_size 8k;
        proxy_temp_file_write_size 64k;

        # For SSE or streaming responses
        # proxy_buffering off;

        # Cache settings (optional)
        proxy_cache off;
        # proxy_cache_bypass $http_authorization;
        # proxy_no_cache $http_authorization;

        # Error handling
        proxy_intercept_errors off;

        # Security headers (if not set by backend)
        # add_header X-Content-Type-Options "nosniff" always;
        # add_header X-Frame-Options "DENY" always;
        # add_header X-XSS-Protection "1; mode=block" always;

        # CORS is handled by Flask backend - don't add duplicate headers
        # If backend doesn't handle CORS, uncomment these:
        # add_header Access-Control-Allow-Origin "$http_origin" always;
        # add_header Access-Control-Allow-Credentials "true" always;
        # add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        # add_header Access-Control-Allow-Headers "Authorization, Content-Type, Accept" always;

        # Handle preflight requests
        if ($request_method = OPTIONS) {
            # If backend handles OPTIONS, let it pass through
            # Otherwise, uncomment these lines:
            # add_header Access-Control-Allow-Origin "$http_origin" always;
            # add_header Access-Control-Allow-Credentials "true" always;
            # add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
            # add_header Access-Control-Allow-Headers "Authorization, Content-Type, Accept" always;
            # add_header Access-Control-Max-Age 86400;
            # add_header Content-Length 0;
            # add_header Content-Type text/plain;
            # return 204;
        }
    }

    # WebSocket specific endpoint (if needed separately)
    location /ws/ {
        proxy_pass http://backend_service;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # WebSocket specific timeouts (longer for persistent connections)
        proxy_connect_timeout 7d;
        proxy_send_timeout 7d;
        proxy_read_timeout 7d;
    }

    # Authentication endpoints with stricter rate limiting
    location ~ ^/api/(login|register|reset-password) {
        # Stricter rate limiting for auth endpoints
        # limit_req zone=auth_limit burst=2 nodelay;

        proxy_pass http://backend_service;

        # Same proxy headers as above
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $server_name;

        proxy_http_version 1.1;
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
    }

    # File upload endpoint with larger body size
    location /api/upload {
        client_max_body_size 50M;  # Adjust as needed

        proxy_pass http://backend_service;

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Longer timeout for file uploads
        proxy_connect_timeout 60s;
        proxy_send_timeout 600s;
        proxy_read_timeout 600s;

        # Disable buffering for uploads
        proxy_request_buffering off;
    }

    # SPA routing - serve index.html for all non-API routes
    location / {
        try_files $uri $uri/ /index.html;

        # Cache control for HTML
        add_header Cache-Control "no-store, no-cache, must-revalidate, private" always;
        add_header Pragma "no-cache" always;

        # Security headers for HTML
        add_header X-Frame-Options "DENY" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    }

    # Static assets with aggressive caching
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";

        # Security headers
        add_header X-Content-Type-Options "nosniff" always;
    }

    # Prevent access to sensitive files
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }

    # Block common attack patterns
    location ~* (\.php|\.aspx|\.asp|\.jsp|\.cgi)$ {
        return 404;
    }

    # Health check endpoint
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }

    # Error pages
    error_page 404 /index.html;
    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
        root /usr/share/nginx/html;
    }
}