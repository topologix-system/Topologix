# Topologix Environment Configuration Template
#
# USAGE:
# Quick Start:
#   - Development: cp .env.development .env
#   - Production:  cp .env.production .env
#
# Or use docker-compose --env-file option:
#   - Development: docker compose --env-file .env.development up -d
#   - Production:  docker compose --env-file .env.production up -d
#
# Then start the containers:
#   docker compose up -d

# ============================================
# Backend Configuration
# ============================================

# Backend Command (Environment-specific)
# Development (Flask dev server with hot reload):
#   BACKEND_COMMAND=python app.py
# Production (Gunicorn WSGI server):
#   BACKEND_COMMAND=gunicorn --bind 0.0.0.0:5000 --workers 4 --threads 2 --timeout 120 --access-logfile - --error-logfile - --log-level info 'app:app'

# Flask Environment
FLASK_ENV=development
FLASK_DEBUG=True

# Batfish Service
BATFISH_HOST=batfish
BATFISH_PORT=9996

# CORS Origins (comma-separated)
# Add your frontend URLs here. For production, replace with your actual domain
# Example: CORS_ORIGINS=http://localhost:3000,https://yourdomain.com
CORS_ORIGINS=http://localhost:3000

# ============================================
# Authentication (Optional Feature)
# ============================================

# Enable/Disable Authentication System
# Set to 'true' to enable JWT-based authentication
# Set to 'false' for open access (default for OSS distribution)
AUTH_ENABLED=false

# Default Admin Credentials (only used when AUTH_ENABLED=true)
# Leave AUTH_DEFAULT_ADMIN_PASS empty to trigger first-time setup wizard
AUTH_DEFAULT_ADMIN_USER=admin
AUTH_DEFAULT_ADMIN_PASS=

# JWT Secret Keys (auto-generated if not set, but should be set in production)
# Generate using: python3 -c "import secrets; print(secrets.token_urlsafe(32))"
# SECRET_KEY=
# JWT_SECRET_KEY=
# CSRF_SECRET_KEY=

# ============================================
# Email Configuration (for password reset, notifications, etc.)
# ============================================

# Email Provider: 'console' (print to console), 'smtp' (send via SMTP), 'disabled' (no email)
# Default: 'console' for development
EMAIL_PROVIDER=console

# Email From Address and Name
EMAIL_FROM=noreply@topologix.local
EMAIL_FROM_NAME=Topologix

# SMTP Configuration (only used when EMAIL_PROVIDER=smtp)
SMTP_HOST=localhost
SMTP_PORT=587
SMTP_USERNAME=
SMTP_PASSWORD=
SMTP_USE_TLS=true

# Password Reset Configuration
# Token expiry time in seconds (default: 3600 = 1 hour)
PASSWORD_RESET_TOKEN_EXPIRY=3600

# Frontend base URL for password reset links
# Update this to match your frontend URL
PASSWORD_RESET_URL_BASE=http://localhost:3000

# ============================================
# Database Configuration (only used when AUTH_ENABLED=true)
# ============================================

# Database URL - supports SQLite, PostgreSQL, MySQL
# SQLite (default - good for development and small deployments):
DATABASE_URL=sqlite:////app/data/topologix.db

# PostgreSQL (recommended for production):
# DATABASE_URL=postgresql://username:password@postgres:5432/topologix

# MySQL:
# DATABASE_URL=mysql+pymysql://username:password@mysql:3306/topologix

# Notes:
# - When AUTH_ENABLED=false, database is not initialized
# - For Docker, use /app/data/topologix.db for SQLite to persist in volume
# - For PostgreSQL/MySQL, add service to docker-compose.yaml

# ============================================
# Frontend Configuration
# ============================================

# API Base URL
# Backend API endpoint for frontend to connect to
# For production, replace with your actual backend URL
# Example: VITE_API_BASE_URL=https://api.yourdomain.com
VITE_API_BASE_URL=http://localhost:5000

# Authentication (must match backend AUTH_ENABLED)
VITE_AUTH_ENABLED=false

# Timezone for displaying dates (IANA timezone identifier)
# Default: Asia/Tokyo (JST, UTC+9)
# Examples: America/New_York, Europe/London, UTC
VITE_TIMEZONE=Asia/Tokyo

# ============================================
# Reverse Proxy Configuration
# ============================================

# Number of trusted proxy layers between client and backend
# This setting is critical for proper IP address extraction in security logs
#
# SECURITY WARNING: Incorrect values can allow IP spoofing attacks!
#
# Common values:
#   0 = No proxy (direct connection - not recommended for production)
#   1 = Single proxy layer (nginx in Docker, typical setup) [DEFAULT]
#   2 = Two proxy layers (CDN/Caddy -> nginx -> Flask)
#   3+ = Multiple proxy layers (complex infrastructure)
#
# How to determine the correct value:
#   Count the number of proxies between the internet and your Flask application
#   Example: Internet -> Cloudflare (1) -> nginx (2) -> Flask = TRUSTED_PROXY_COUNT=2
#
# Default: 1 (single nginx proxy in Docker)
# TRUSTED_PROXY_COUNT=1

# ============================================
# Advanced Configuration
# ============================================

# Rate Limiting
# RATELIMIT_ENABLED=true
# RATELIMIT_DEFAULT_PER_MINUTE=60
# RATELIMIT_DEFAULT_PER_HOUR=600

# Redis (for production caching and session storage)
# REDIS_URL=redis://localhost:6379/0

# Logging
# LOG_LEVEL=INFO
# LOG_FILE=topologix.log
# AUDIT_LOG_FILE=topologix_audit.log

# File Upload
# MAX_CONTENT_LENGTH=10485760  # 10MB in bytes
# UPLOAD_FOLDER=/tmp/topologix_uploads

# Paths
# SNAPSHOTS_DIR=/snapshots